#!/bin/bash
# Rushy Panchal
# shell functions

_init_pyenv() {
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="$PYENV_ROOT/shims:$PATH"

    eval "$(command pyenv init -)"
	if python -m certifi; then
		local certifi_path=$(python -m certifi)
		export SSL_CERT_FILE="$certifi_path"
		export REQUEST_CA_BUNDLE="$certifi_path"
	fi
}

pyenv() {
    unset -f pyenv pipenv

    _init_pyenv
    pyenv "$@"
}

pipenv() {
    unset -f pyenv pipenv

    _init_pyenv
    pipenv "$@"
}

goenv() {
    unset -f goenv

    export GOENV_ROOT="$HOME/.goenv"
    export PATH="$GOENV_ROOT/bin:$PATH"
    eval "$(goenv init -)"
}

nvm() {
    unset -f nvm

    export NVM_DIR="$HOME/.nvm"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
    [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
    nvm "$@"
}

rbenv() {
    unset -f rbenv

    eval "$(command rbenv init -)"
    rbenv "$@"
}

# opam configuration
opam() {
    unset -f opam

    eval "$(command opam config env)"
    opam "$@"
}

find_git_branch() {
  # Based on: http://stackoverflow.com/a/13003854/170413
  local branch
  if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null); then
    if [[ "$branch" == "HEAD" ]]; then
      branch='detached*'
    fi
    git_branch="âŽ‡ $branch"
  else
    git_branch=""
  fi
}

function del-squashed () {
    local branch=${1:-master}

    git checkout $branch && \
	comm -12 \
	     <(git branch | sed "s/[ *]//g") \
	     <(git remote prune origin | sed "s/^.*origin\///g") \
	    | xargs -L1 -J % git branch -D %
}

repeat_cmd() {
    number_repeat=$1
    shift 1

    for run in {1..$number_repeat}; do
        "$@"
        # echo "$?"
        test "$?" -ne 0 && break
    done
    }

docker_clean() {
    # Clean docker images and stop all running containers. May require rebuild of containers
    # in the future.
    echo "Deleting images with label=<none> and tag != latest..."
    docker image ls | awk '{ if ($1 == "<none>" && $2 != "latest" ) { print $3 } }' | xargs docker im\
age rm -f
    echo "Stopping all containers..."
    docker stop -t 0 $(docker ps -aq)
    echo "Removing all containers..."
    docker rm $(docker ps -aq)
}

docker_postgres() {
    mkdir -p "$HOME/docker/volumes/postgres"
    docker \
        run \
        --rm \
        --name \
        pg-docker \
        --env POSTGRES_USER \
        --env POSTGRES_PASSWORD \
        --detach \
        --publish 5432:5432 \
        --volume="$HOME/docker/volumes/postgres:/var/lib/postgresql/data" \
        postgres
}

replace_all() {
    # Replace all occurrences of $1 with $2
    ag -0 -l $1 | xargs -0 sed -i '' -e "s/$1/$2/g"
}

replace_all_literal() {
    # Replace all occurrences of $1 with $2
    ag -Q -0 -l $1 | xargs -0 sed -i '' -e "s/$1/$2/g"
}

gi() {
    curl -L -s "https://www.gitignore.io/api/$@"
}

sum_file() {
    awk '{ sum += $1 } END { print sum }' "$@"
}

avg_file() {
    awk '{ sum += $1; n++ } END { if (n > 0) print sum/n }' "$@"
}

count_files() {
    # Count number of files in $1
    du -a "$1" | cut -d/ -f2 | sort | uniq -c | sort -nr
}

cat_files() {
    tail -n +1 "$@"
}

git_cloc() {
    git ls-files | xargs wc -l
}

clean_icon() {
    find -X . -name '*Icon*' -delete
}

ag_group() {
    start=$1
    pattern=$2
    end=$3
    shift 3

    ag --nonumbers -o "$start\K$pattern(?=$end)" $@
}

local_tcp_server() {
    port=$1

    nc -lv $port
}

local_udp_server() {
    port=$1

    nc -lvu $port
}

view_json() {
	jq -C . $1 | less -R
}

### WSL 2
if command -v wslpath >/dev/null 2>&1; then
    explorer() {
	local explorer_path="$@"
	if [ -z "$explorer_path" ]; then
	    explorer_path="$PWD"
	fi

	explorer.exe `wslpath -w "$explorer_path"`
    }
fi

